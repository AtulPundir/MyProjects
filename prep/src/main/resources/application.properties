spring.application.name=prep
server.port=8081


 # Open circuit if 50% requests fail
resilience4j.circuitbreaker.instances.paymentService.failureRateThreshold=50 

# Time in ms before retrying (10 sec)
resilience4j.circuitbreaker.instances.paymentService.waitDurationInOpenState=10000

# Evaluate failures in last 10 requests
resilience4j.circuitbreaker.instances.paymentService.slidingWindowSize=10 


# If a user sends more than 5 requests within 10 seconds, they will receive a rate-limit error.
 # Allow max 5 requests/Max 5 requests allowed in a perios
resilience4j.ratelimiter.instances.circuitBreakerTestService.limit-for-period=5

# Refresh every 10 seconds
resilience4j.ratelimiter.instances.circuitBreakerTestService.limit-refresh-period=10s

# If limit is exceeded, wait 500ms
resilience4j.ratelimiter.instances.circuitBreakerTestService.timeout-duration=500ms


#Another Way
resilience4j.ratelimiter.configs.circuitBreakerTestService.base-config=default
resilience4j.ratelimiter.configs.default.limit-for-period=5
resilience4j.ratelimiter.configs.default.limit-refresh-period=10s
resilience4j.ratelimiter.configs.default.timeout-duration=500ms




resilience4j.ratelimiter.instances.dummy.limit-for-period=5

resilience4j.ratelimiter.instances.dummy.limit-refresh-period=100ms

resilience4j.ratelimiter.instances.dummy.timeout-duration=5s